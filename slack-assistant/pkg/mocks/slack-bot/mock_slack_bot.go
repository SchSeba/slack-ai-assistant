// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/slack-bot/slack-bot.go
//
// Generated by this command:
//
//	mockgen -source=pkg/slack-bot/slack-bot.go -destination=pkg/mocks/slack-bot/mock_slack_bot.go -package=slackbot
//

// Package slackbot is a generated GoMock package.
package slackbot

import (
	context "context"
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetBotUser mocks base method.
func (m *MockInterface) GetBotUser() *slack.AuthTestResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUser")
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	return ret0
}

// GetBotUser indicates an expected call of GetBotUser.
func (mr *MockInterfaceMockRecorder) GetBotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUser", reflect.TypeOf((*MockInterface)(nil).GetBotUser))
}

// GetConversationReplies mocks base method.
func (m *MockInterface) GetConversationReplies(params *slack.GetConversationRepliesParameters) ([]slack.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationReplies", params)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationReplies indicates an expected call of GetConversationReplies.
func (mr *MockInterfaceMockRecorder) GetConversationReplies(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationReplies", reflect.TypeOf((*MockInterface)(nil).GetConversationReplies), params)
}

// PostMessage mocks base method.
func (m *MockInterface) PostMessage(channel, threadTS, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", channel, threadTS, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockInterfaceMockRecorder) PostMessage(channel, threadTS, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockInterface)(nil).PostMessage), channel, threadTS, message)
}

// Start mocks base method.
func (m *MockInterface) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockInterfaceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInterface)(nil).Start), ctx)
}
