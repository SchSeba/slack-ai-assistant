name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  GO_VERSION: "1.24"
  GOLANGCI_LINT_VERSION: "v2.3.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  LLAMAINDEX_IMAGE_NAME: ${{ github.repository_owner }}/llamaindex-server

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('slack-assistant/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps-go

    - name: Run go fmt
      run: make fmt-go

    - name: Check formatting
      working-directory: slack-assistant
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: make vet-go

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m
        working-directory: slack-assistant

    - name: Check mock files are up to date
      run: |
        # Generate mock files
        make mock-generate-go
        
        # Check if any files were changed
        if [ -n "$(git status --porcelain)" ]; then
          echo "Mock files are out of date. Please run 'make mock-generate-go' and commit the changes."
          echo "Changed files:"
          git status --porcelain
          git diff
          exit 1
        fi
        echo "Mock files are up to date."

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('slack-assistant/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps-go

    - name: Run unit tests
      run: make test-race-go

    - name: Generate coverage report
      working-directory: slack-assistant
      run: |
        go test -v -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          slack-assistant/coverage.out
          slack-assistant/coverage.html

  container-build:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build container image
      uses: docker/build-push-action@v6
      with:
        context: slack-assistant
        file: slack-assistant/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Export image for testing
      uses: docker/build-push-action@v6
      with:
        context: slack-assistant
        file: slack-assistant/Dockerfile
        load: true
        tags: test-image:latest
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}

    - name: Test container image
      run: |
        # Test that the container runs and shows help
        docker run --rm test-image:latest --help > /dev/null
        echo "Container test passed"

  llamaindex-container-build:
    name: LlamaIndex Container Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.LLAMAINDEX_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build container image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: llamaindex-server/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Export image for testing
      uses: docker/build-push-action@v6
      with:
        context: .
        file: llamaindex-server/Dockerfile
        load: true
        tags: llamaindex-test-image:latest

    - name: Test container image
      run: |
        # Start container and test health endpoint
        docker run -d --name llamaindex-test -p 5000:5000 \
          -e GEMINI_API_KEY=dummy-key-for-testing \
          llamaindex-test-image:latest
        sleep 15
        curl -f http://localhost:5000/health || exit 1
        echo "LlamaIndex container test passed"
        docker stop llamaindex-test
        docker rm llamaindex-test

  container-publish:
    name: Container Publish
    runs-on: ubuntu-latest
    needs: [lint, unit-test, container-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest

    - name: Build and push container image
      uses: docker/build-push-action@v6
      with:
        context: slack-assistant
        file: slack-assistant/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  llamaindex-container-publish:
    name: LlamaIndex Container Publish
    runs-on: ubuntu-latest
    needs: [llamaindex-container-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.LLAMAINDEX_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest

    - name: Build and push container image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: llamaindex-server/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [container-build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image for scanning
      uses: docker/build-push-action@v6
      with:
        context: slack-assistant
        file: slack-assistant/Dockerfile
        load: true
        tags: scan-image:latest
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: scan-image:latest
        format: sarif
        output: trivy-results.sarif

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif
