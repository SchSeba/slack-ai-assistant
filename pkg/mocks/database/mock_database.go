// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/database.go
//
// Generated by this command:
//
//	mockgen -source=pkg/database/database.go -destination=pkg/mocks/database/mock_database.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockInterface) AutoMigrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMigrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockInterfaceMockRecorder) AutoMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockInterface)(nil).AutoMigrate))
}

// Close mocks base method.
func (m *MockInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// CreateSlackThreadWithSlug mocks base method.
func (m *MockInterface) CreateSlackThreadWithSlug(thread, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackThreadWithSlug", thread, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSlackThreadWithSlug indicates an expected call of CreateSlackThreadWithSlug.
func (mr *MockInterfaceMockRecorder) CreateSlackThreadWithSlug(thread, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackThreadWithSlug", reflect.TypeOf((*MockInterface)(nil).CreateSlackThreadWithSlug), thread, slug)
}

// GetSlugForThread mocks base method.
func (m *MockInterface) GetSlugForThread(slackThread string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlugForThread", slackThread)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlugForThread indicates an expected call of GetSlugForThread.
func (mr *MockInterfaceMockRecorder) GetSlugForThread(slackThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlugForThread", reflect.TypeOf((*MockInterface)(nil).GetSlugForThread), slackThread)
}
